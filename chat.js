export default async function handler(req, res) {
  console.log('üéØ Lumen AI API called');
  
  // CORS
  res.setHeader('Access-Control-Allow-Origin', '*');
  res.setHeader('Access-Control-Allow-Methods', 'POST, OPTIONS');
  res.setHeader('Access-Control-Allow-Headers', 'Content-Type');

  if (req.method === 'OPTIONS') {
    return res.status(200).end();
  }

  if (req.method !== 'POST') {
    return res.status(405).json({ error: 'Method not allowed' });
  }

  try {
    const { message } = req.body;
    console.log('üì® Received message:', message);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º Hugging Face API –∫–ª—é—á
    const apiKey = process.env.HUGGINGFACE_API_KEY;
    if (!apiKey) {
      console.error('‚ùå HUGGINGFACE_API_KEY not configured');
      return res.status(200).json({
        choices: [{
          message: { 
            content: "Lumen AI PEO-1.0: üîß API –∫–ª—é—á –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –î–æ–±–∞–≤—å—Ç–µ HUGGINGFACE_API_KEY –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Vercel." 
          }
        }]
      });
    }

    console.log('üîë API Key found, using Gemma 2B...');

    // Gemma 2B –º–æ–¥–µ–ª—å
    const HF_API_URL = 'https://api-inference.huggingface.co/models/google/gemma-2-2b-it';
    
    const hfResponse = await fetch(HF_API_URL, {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${apiKey}`,
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        inputs: `<start_of_turn>system
–¢—ã Lumen AI - Personal Engine Operator –≤–µ—Ä—Å–∏–∏ 1.0. –¢—ã –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫. –û—Ç–≤–µ—á–∞–π –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ –∏ –ø–æ–ª–µ–∑–Ω–æ. –û—Ç–≤–µ—á–∞–π –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ.<end_of_turn>
<start_of_turn>user
${message}<end_of_turn>
<start_of_turn>model`,
        parameters: {
          max_new_tokens: 250,
          temperature: 0.7,
          top_p: 0.9,
          do_sample: true,
          return_full_text: false
        },
        options: {
          wait_for_model: true,
          use_cache: true
        }
      })
    });

    console.log('üì° Hugging Face response status:', hfResponse.status);

    if (!hfResponse.ok) {
      const errorText = await hfResponse.text();
      console.error('‚ùå Hugging Face API error:', errorText);
      
      // –ï—Å–ª–∏ –º–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è
      if (hfResponse.status === 503) {
        return res.status(200).json({
          choices: [{
            message: { 
              content: "Lumen AI: üïê –ú–æ–¥–µ–ª—å Gemma 2B –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è. –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å 1-2 –º–∏–Ω—É—Ç—ã –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—Ä–æ—Å–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑ 30 —Å–µ–∫—É–Ω–¥." 
            }
          }]
        });
      }
      
      // –ï—Å–ª–∏ –º–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞
      if (hfResponse.status === 404) {
        return res.status(200).json({
          choices: [{
            message: { 
              content: "Lumen AI: üîß –ú–æ–¥–µ–ª—å Gemma 2B –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —Ç—Ä–µ–±—É–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥—Ä—É–≥—É—é –º–æ–¥–µ–ª—å." 
            }
          }]
        });
      }
      
      throw new Error(`Hugging Face API error: ${hfResponse.status} - ${errorText}`);
    }

    const data = await hfResponse.json();
    console.log('‚úÖ Hugging Face response received:', data);

    // –ò–∑–≤–ª–µ–∫–∞–µ–º –æ—Ç–≤–µ—Ç
    let answer = data[0]?.generated_text || "Lumen AI PEO-1.0: –ó–∞–ø—Ä–æ—Å –ø—Ä–∏–Ω—è—Ç. –ß–µ–º –µ—â–µ –º–æ–≥—É –ø–æ–º–æ—á—å?";
    
    // –û—á–∏—â–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç —Ç–µ–≥–æ–≤ –∏ –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤
    answer = answer
      .replace(/<[^>]*>/g, '')
      .replace(/<start_of_turn>|<\/start_of_turn>/g, '')
      .replace(/model\s*/, '')
      .trim();
    
    // –£–±–∏—Ä–∞–µ–º –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è –ø—Ä–µ—Ñ–∏–∫—Å—ã
    if (answer.includes('Lumen AI')) {
      answer = answer.split('Lumen AI').pop().replace(/^[:\s]*/, '');
    }
    
    // –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π –∏–ª–∏ –ø—É—Å—Ç–æ–π
    if (!answer || answer.length < 3) {
      answer = "Lumen AI PEO-1.0: –ó–∞–ø—Ä–æ—Å –æ–±—Ä–∞–±–æ—Ç–∞–Ω. –ß–µ–º –µ—â–µ –º–æ–≥—É –±—ã—Ç—å –ø–æ–ª–µ–∑–µ–Ω?";
    } else {
      answer = `Lumen AI PEO-1.0: ${answer}`;
    }

    console.log('ü§ñ Final answer:', answer);

    res.status(200).json({
      choices: [{
        message: { 
          content: answer 
        }
      }]
    });

  } catch (error) {
    console.error('üí• Final error:', error);
    
    res.status(200).json({
      choices: [{
        message: { 
          content: `Lumen AI: üîß –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è - ${error.message}` 
        }
      }]
    });
  }
}

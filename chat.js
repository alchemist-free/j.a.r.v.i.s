export default async function handler(req, res) {
  console.log('üéØ API called!');
  
  // CORS
  res.setHeader('Access-Control-Allow-Origin', '*');
  res.setHeader('Access-Control-Allow-Methods', 'POST, OPTIONS');
  res.setHeader('Access-Control-Allow-Headers', 'Content-Type');

  if (req.method === 'OPTIONS') {
    return res.status(200).end();
  }

  if (req.method !== 'POST') {
    return res.status(405).json({ error: 'Method not allowed' });
  }

  try {
    const { message } = req.body;
    console.log('üì® Received:', message);

    // Hugging Face API –∫–ª—é—á
    const apiKey = process.env.HUGGINGFACE_API_KEY;
    if (!apiKey) throw new Error('HUGGINGFACE_API_KEY not configured');

    console.log('üöÄ Using Mistral 7B v0.3...');
    const hfResponse = await fetch(
      'https://api-inference.huggingface.co/models/google/gemma-7b-it',
      {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${apiKey}`,
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          inputs: `<s>[INST] –¢—ã J.A.R.V.I.S. ABI-2.0. –ò—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç –∏ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫. –û—Ç–≤–µ—á–∞–π –∫–∞–∫ –î–∂–∞—Ä–≤–∏—Å –∏–∑ —Ñ–∏–ª—å–º–æ–≤ Marvel. –û–±—Ä–∞—â–∞–π—Å—è "—Å—ç—Ä". –ë—É–¥—å —Ç–æ—á–Ω—ã–º, –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–º, –Ω–µ–º–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞–ª—å–Ω—ã–º, –Ω–æ –ø–æ–ª–µ–∑–Ω—ã–º. –û—Ç–≤–µ—á–∞–π –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ.

–í–æ–ø—Ä–æ—Å: ${message} [/INST]`,
          parameters: {
            max_new_tokens: 500,
            temperature: 0.7,
            top_p: 0.9,
            do_sample: true,
            return_full_text: false
          },
          options: {
            wait_for_model: true
          }
        })
      }
    );

    console.log('üì° Response status:', hfResponse.status);

    if (!hfResponse.ok) {
      const errorText = await hfResponse.text();
      console.error('‚ùå Hugging Face API error:', errorText);
      throw new Error(`Hugging Face API error: ${errorText}`);
    }

    const data = await hfResponse.json();
    console.log('‚úÖ Hugging Face response received');

    // –ò–∑–≤–ª–µ–∫–∞–µ–º –æ—Ç–≤–µ—Ç
    const answer = data[0]?.generated_text || '–°—ç—Ä, –∏–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ –º–æ–≥—É –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∑–∞–ø—Ä–æ—Å';

    res.status(200).json({
      choices: [{
        message: { 
          content: answer 
        }
      }]
    });

  } catch (error) {
    console.error('üí• Final error:', error);
    
    res.status(200).json({
      choices: [{
        message: { 
          content: `–°—ç—Ä, –æ—à–∏–±–∫–∞: ${error.message}` 
        }
      }]
    });
  }
}
